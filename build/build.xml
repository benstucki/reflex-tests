<project name="Reflex Tests Build" basedir="../" default="reflex-tests">
	
	<property file="./build/build.properties" />
	<property name="FLEX_HOME" value="${flex-sdk.dir}" />
	
	<taskdef resource="flexTasks.tasks" classpath="${flex-sdk.dir}/ant/lib/flexTasks.jar"/>
	<taskdef resource="flexUnitTasks.tasks" classpath="${flex-unit.dir}/flexUnitTasks-${flex-unit.version}.jar" />
	<taskdef name="saxon-xslt" classname="net.sf.saxon.ant.AntTransform" classpath="${libs.dir}/saxon9he.jar;${libs.dir}/saxon9-ant.jar" />
	
	<taskdef name="pmd" classname="com.adobe.ac.pmd.ant.FlexPmdAntTask" classpath="${flex-pmd.pmd}/flex-pmd-ant-task-${flex-pmd.version}.jar">
		<classpath>
			<fileset dir="${flex-pmd.pmd}">
				<include name="**/*.jar" />
			</fileset>
		</classpath>
	</taskdef>
	
	<taskdef name="cpd" classname="com.adobe.ac.cpd.ant.FlexCpdAntTask" classpath="${flex-pmd.cpd}/flex-pmd-cpd-ant-task-${flex-pmd.version}.jar">
		<classpath>
			<fileset dir="${flex-pmd.cpd}">
				<include name="**/*.jar" />
			</fileset>
		</classpath>
	</taskdef>
	
	<taskdef name="metrics" classname="com.adobe.ac.pmd.metrics.ant.FlexMetricsAntTask" classpath="${flex-pmd.metrics}/flex-pmd-metrics-ant-task-${flex-pmd.version}.jar">
		<classpath>
			<fileset dir="${flex-pmd.metrics}">
				<include name="**/*.jar" />
			</fileset>
		</classpath>
	</taskdef>
	
	<target name="clean">
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${bin.dir}" defaultexcludes="false">
				<include name="**/*"/>
			</fileset>
			<fileset dir="${reports.dir}" defaultexcludes="false">
				<include name="**/*"/>
			</fileset>
		</delete>
	</target>
	
	<!-- Compiles the library as a SWC -->
	<target name="compile-library">
		<compc output="${bin.dir}/${library.name}.swc">
			<external-library-path dir="${flex-sdk.dir}/frameworks/libs/player/${flex-sdk.player}" append="true">
				<include name="playerglobal.swc" />
			</external-library-path>
			<library-path dir="${flex-sdk.dir}/frameworks" append="true">
				<include name="libs/*.swc" />
				<include name="locale/${flex-sdk.locale}/*.swc" />
			</library-path>
			<source-path path-element="${library.src}"/>
			<namespace uri="http://rx.reflex.io/2010" manifest="${library.src}/manifest.xml" />
			<include-namespaces>http://rx.reflex.io/2010</include-namespaces>
			<!--<library-path dir="${library.src}/../libs" append="true">
				<include name="*.swc" />
			</library-path>-->
			<strict>true</strict>
			<optimize>true</optimize>
			<warnings>true</warnings>
			<!--<library-path dir="${library.src}/../libs" append="true">
				<include name="*.swc" />
			</library-path>-->
		</compc>
	</target>
	
	<!-- Compile ReflexTests.mxml as a SWF -->
	<target name="compile-tests">
		<mxmlc file="${src.dir}/ReflexTests.mxml" output="${bin.dir}/ReflexTests.swf" debug="true" fork="true" maxmemory="512m">
			<load-config filename="${basedir}/build/flex-config.xml"/>
			<external-library-path dir="${flex-sdk.dir}/frameworks/libs/player/${flex-sdk.player}" append="true">
				<include name="playerglobal.swc" />
			</external-library-path>
			<library-path dir="${flex-sdk.dir}/frameworks" append="true">
				<include name="libs/*.swc" />
				<include name="locale/${flex-sdk.locale}/*.swc" />
			</library-path>
			<library-path dir="${libs.dir}" append="true">
				<include name="*.swc" />
			</library-path>
			<library-path dir="${bin.dir}" append="true">
				<include name="*.swc" />
			</library-path>
			<source-path path-element="${library.tests}" />
			<show-actionscript-warnings>false</show-actionscript-warnings>
			<show-binding-warnings>false</show-binding-warnings>
			<verbose-stacktraces>true</verbose-stacktraces>
			<target-player>10.0.0</target-player>
		</mxmlc>
	</target>
	
	<!-- Execute ReflexTests -->
	<target name="test-runner">
		<flexunit swf="${bin.dir}/ReflexTests.swf" toDir="${reports.dir}" haltonfailure="true" verbose="true" localTrusted="true" headless="false" />
	</target>
	
	<target name="reflex-tests">
		<antcall target="compile-library" />
		<antcall target="compile-tests" />
		<antcall target="test-runner" />
	</target>
	
	<!-- Execute CoverageViewer & ReflexTests -->
	<target name="coverage-test" depends="clean">
		<antcall target="compile-library" />
		<antcall target="compile-tests" />
		<exec executable="${flex-cover.exe}" spawn="true">
			<arg line="'${flex-cover.cvm}'" />
			<arg line="-output '${flex-cover.cvr}'" />
		</exec>
		<sleep seconds="30"/>
		<antcall target="test-runner" />
	</target>
	
	<!-- Run PMD static code analysis -->
	<target name="pmd-report">
		<pmd sourceDirectory="${library.src}" outputDirectory="${pmd-report.dir}" ruleSet="${flex-pmd.dir}/pmd.xml"/>
	</target>
	
	<!-- Run Copy/Paste Detection -->
	<target name="cpd-report">
		<cpd minimumTokenCount="50" outputFile="${cpd-report.dir}/${cpd-report.name}.xml">
			<fileset dir="${library.src}">
				<include name="**/*.as"/>
				<include name="**/*.mxml"/>
			</fileset>
		</cpd>
	</target>
	
	<!-- Run Metrics Report -->
	<target name="metrics-report">
		<metrics sourcedirectory="${library.src}" outputfile="${metrics-report.dir}/${metrics-report.name}.xml" />
	</target>
	
	<!-- Generate Cobertura style xml from a FlexCover cvr file -->
	<target name="cobertura-report">
		<tstamp>
			<format property="flex-cover.timestamp" pattern="MM/dd/yyyy HH:mm:ss.SSS"/>
		</tstamp>
		<saxon-xslt in="${flex-cover.cvr}" out="${flex-cover.cobertura}" style="build/fc-to-cobertura.xsl">
			<classpath>
				<fileset dir="libs">
					<include name="*.jar"/>
				</fileset>
			</classpath>
			<param name="sourcePath" expression="${src.dir}"/>
			<param name="timestamp" expression="${flex-cover.timestamp}"/>
			<param name="version" expression="0.81"/>
		</saxon-xslt>
	</target>
	
	<!-- Generate readable JUnit-style reports -->
	<target name="test-report">
		<junitreport todir="${tests.dir}">
			<fileset dir="${reports.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${tests.dir}" />
		</junitreport>
	</target>
	
	<!-- Run ALL Tests and generate ALL reports -->
	<target name="coverage-test-and-report" depends="coverage-test">
		<waitfor checkevery="3" checkeveryunit="second" maxwait="10" maxwaitunit="minute">
			<available file="${flex-cover.cvr}"/>
		</waitfor>
		<antcall target="test-report" />
		<antcall target="cobertura-report" />
		<antcall target="pmd-report" />
		<antcall target="cpd-report" />
		<antcall target="metrics-report" />
	</target>
	
</project>